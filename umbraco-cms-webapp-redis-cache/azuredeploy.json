{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "hostingPlanName": {
            "type": "string",
            "minLength": 1
        },
        "skuName": {
            "type": "string",
            "defaultValue": "F1",
            "allowedValues": [
                "F1",
                "D1",
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1",
                "P2",
                "P3",
                "P4"
            ],
            "metadata": {
                "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
            }
        },
        "skuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "metadata": {
                "description": "Describes plan's instance count"
            }
        },
        "administratorLogin": {
            "type": "string"
        },
        "administratorLoginPassword": {
            "type": "securestring"
        },
        "databaseName": {
            "type": "string"
        },
        "collation": {
            "type": "string",
            "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
        },
        "edition": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ]
        },
        "maxSizeBytes": {
            "type": "string",
            "defaultValue": "1073741824"
        },
        "requestedServiceObjectiveName": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "S0",
                "S1",
                "S2",
                "P1",
                "P2",
                "P3"
            ],
            "metadata": {
                "description": "Describes the performance level for Edition"
            }
        },
        "RedisCacheName": {
            "type": "string",
            "minLength": 1
        },
        "RedisCacheSKUName": {
            "type": "string",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "defaultValue": "Standard"
        },
        "RedisCacheSKUFamily": {
            "type": "string",
            "allowedValues": [
                "C"
            ],
            "defaultValue": "C"
        },
        "RedisCacheSKUCapacity": {
            "type": "int",
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "defaultValue": 0
        },
        "RedisCacheRedisVersion": {
            "type": "string",
            "allowedValues": [
                "2.8"
            ],
            "defaultValue": "2.8"
        },
        "StorageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ]
        },
        "_artifactsLocation": {
            "type": "string"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring"
        },
        "MSDeployPackageFolder": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "WebDeploy package location. This path is relative to the _artifactsLocation parameter"
            }
        },
        "MSDeployPackageFileName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Name of the webdeploy package"
            }
        }
    },
    "variables": {
        "webSiteName": "[concat('webSite', uniqueString(resourceGroup().id))]",
        "sqlserverName": "[concat('sqlserver', uniqueString(resourceGroup().id))]",
        "StorageAccountName": "[concat('StorageAccount', uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "name": "[variables('sqlserverName')]",
            "type": "Microsoft.Sql/servers",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "SqlServer"
            },
            "apiVersion": "2014-04-01-preview",
            "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]"
            },
            "resources": [
                {
                    "name": "[parameters('databaseName')]",
                    "type": "databases",
                    "location": "[resourceGroup().location]",
                    "tags": {
                        "displayName": "Database"
                    },
                    "apiVersion": "2014-04-01-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
                    ],
                    "properties": {
                        "edition": "[parameters('edition')]",
                        "collation": "[parameters('collation')]",
                        "maxSizeBytes": "[parameters('maxSizeBytes')]",
                        "requestedServiceObjectiveName": "[parameters('requestedServiceObjectiveName')]"
                    }
                },
                {
                    "type": "firewallrules",
                    "apiVersion": "2014-04-01-preview",
                    "dependsOn": [
                        "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
                    ],
                    "location": "[resourceGroup().location]",
                    "name": "AllowAllWindowsAzureIps",
                    "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                    }
                }
            ]
        },
        {
            "apiVersion": "2015-08-01",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "HostingPlan"
            },
            "sku": {
                "name": "[parameters('skuName')]",
                "capacity": "[parameters('skuCapacity')]"
            },
            "properties": {
                "name": "[parameters('hostingPlanName')]"
            }
        },
        {
            "apiVersion": "2015-08-01",
            "name": "[variables('webSiteName')]",
            "type": "Microsoft.Web/sites",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Web/serverFarms/', parameters('hostingPlanName'))]"
            ],
            "tags": {
                "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "empty",
                "displayName": "Website"
            },
            "properties": {
                "name": "[variables('webSiteName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            },
            "resources": [
                {
                    "apiVersion": "2015-08-01",
                    "type": "config",
                    "name": "connectionstrings",
                    "dependsOn": [
                        "[concat('Microsoft.Web/Sites/', variables('webSiteName'))]",
                        "[concat('Microsoft.Sql/servers/', variables('sqlserverName'), parameters('databaseName'))]",
                        "[concat('Microsoft.Web/Sites/', variables('webSiteName'), '/Extensions/MSDeploy')]"
                    ],
                    "properties": {
                        "DefaultConnection": {
                            "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('administratorLogin'), '@', variables('sqlserverName'), ';Password=', parameters('administratorLoginPassword'), ';')]",
                            "type": "SQLAzure"
                        }
                    }
                },
                {
                    "name": "MSDeploy",
                    "type": "extensions",
                    "location": "[resourceGroup().location]",
                    "apiVersion": "2015-08-01",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', variables('webSiteName'))]",
                        "[concat('Microsoft.Web/Sites/', variables('webSiteName'), '/config/web')]",
                        "[concat('Microsoft.Sql/servers/', variables('sqlserverName'), '/databases/', parameters('databaseName'))]"
                    ],
                    "tags": {
                        "displayName": "MSDeploy"
                    },
                    "properties": {
                        "packageUri": "https://auxmktplceprod.blob.core.windows.net/packages/Premium-UmbracoCms.7.3.0.zip",
                        "dbType": "SQL",
                        "connectionString": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('administratorLogin'), '@', variables('sqlserverName'), ';Password=', parameters('administratorLoginPassword'), ';')]",
                        "setParameters": {
                            "Application Path": "[variables('webSiteName')]",
                            "Database Server": "[reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName]",
                            "Database Name": "[parameters('databaseName')]",
                            "Database Username": "[parameters('administratorLogin')]",
                            "Database Password": "[parameters('administratorLoginPassword')]",
                            "Database Administrator": "[parameters('administratorLogin')]",
                            "Database Administrator Password": "[parameters('administratorLoginPassword')]",
                            "azurestoragerootUrl": "[concat('https://',variables('StorageAccountName'), '.blob.core.windows.net')]",
                            "azurestoragecontainerName": "media",
                            "azurestorageconnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('StorageAccountName'), ';AccountKey=' , listKeys(concat('Microsoft.ClassicStorage/storageAccounts/', variables('StorageAccountName')), '2014-06-01').primaryKey )]",
                            "rediscachehost": "[concat(parameters('redisCacheName'), '.redis.cache.windows.net')]",
                            "rediscacheport": "6379",
                            "rediscacheaccessKey": "[listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2014-04-01').primaryKey]",
                            "azurestoragecacheControl": "*|public, max-age=31536000;js|no-cache"
                        }
                    }
                },
                {
                    "name": "web",
                    "type": "config",
                    "apiVersion": "2015-08-01",
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
                    ],
                    "tags": {
                        "displayName": "web"
                    },
                    "properties": {
                        "phpVersion": "off",
                        "netFrameworkVersion": "v4.5",
                        "use32BitWorkerProcess": "[parameters('use32bitWorkerProcess')",
                        "webSocketsEnabled": true,
                        "alwaysOn": true,
                        "httpLoggingEnabled": true,
                        "logsDirectorySizeLimit": 40
                    }
                }
            ]
        },
        {
            "apiVersion": "2014-04-01",
            "name": "[concat(parameters('hostingPlanName'), '-', resourceGroup().name)]",
            "type": "Microsoft.Insights/autoscalesettings",
            "location": "East US",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
                "displayName": "AutoScaleSettings"
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            ],
            "properties": {
                "profiles": [
                    {
                        "name": "Default",
                        "capacity": {
                            "minimum": 1,
                            "maximum": 2,
                            "default": 1
                        },
                        "rules": [
                            {
                                "metricTrigger": {
                                    "metricName": "CpuPercentage",
                                    "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT10M",
                                    "timeAggregation": "Average",
                                    "operator": "GreaterThan",
                                    "threshold": 80.0
                                },
                                "scaleAction": {
                                    "direction": "Increase",
                                    "type": "ChangeCount",
                                    "value": 1,
                                    "cooldown": "PT10M"
                                }
                            },
                            {
                                "metricTrigger": {
                                    "metricName": "CpuPercentage",
                                    "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                                    "timeGrain": "PT1M",
                                    "statistic": "Average",
                                    "timeWindow": "PT1H",
                                    "timeAggregation": "Average",
                                    "operator": "LessThan",
                                    "threshold": 60.0
                                },
                                "scaleAction": {
                                    "direction": "Decrease",
                                    "type": "ChangeCount",
                                    "value": 1,
                                    "cooldown": "PT1H"
                                }
                            }
                        ]
                    }
                ],
                "enabled": false,
                "name": "[concat(parameters('hostingPlanName'), '-', resourceGroup().name)]",
                "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            }
        },
        {
            "apiVersion": "2014-04-01",
            "name": "[concat('ServerErrors ', variables('webSiteName'))]",
            "type": "Microsoft.Insights/alertrules",
            "location": "East US",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
            ],
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
                "displayName": "ServerErrorsAlertRule"
            },
            "properties": {
                "name": "[concat('ServerErrors ', variables('webSiteName'))]",
                "description": "[concat(variables('webSiteName'), ' has some server errors, status code 5xx.')]",
                "isEnabled": false,
                "condition": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                    "dataSource": {
                        "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                        "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
                        "metricName": "Http5xx"
                    },
                    "operator": "GreaterThan",
                    "threshold": 0.0,
                    "windowSize": "PT5M"
                },
                "action": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                    "sendToServiceOwners": true,
                    "customEmails": [ ]
                }
            }
        },
        {
            "apiVersion": "2014-04-01",
            "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
            "type": "Microsoft.Insights/alertrules",
            "location": "East US",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
            ],
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
                "displayName": "ForbiddenRequestsAlertRule"
            },
            "properties": {
                "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
                "description": "[concat(variables('webSiteName'), ' has some requests that are forbidden, status code 403.')]",
                "isEnabled": false,
                "condition": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                    "dataSource": {
                        "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                        "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
                        "metricName": "Http403"
                    },
                    "operator": "GreaterThan",
                    "threshold": 0,
                    "windowSize": "PT5M"
                },
                "action": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                    "sendToServiceOwners": true,
                    "customEmails": [ ]
                }
            }
        },
        {
            "apiVersion": "2014-04-01",
            "name": "[concat('CPUHigh ', parameters('hostingPlanName'))]",
            "type": "Microsoft.Insights/alertrules",
            "location": "East US",
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            ],
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
                "displayName": "CPUHighAlertRule"
            },
            "properties": {
                "name": "[concat('CPUHigh ', parameters('hostingPlanName'))]",
                "description": "[concat('The average CPU is high across all the instances of ', parameters('hostingPlanName'))]",
                "isEnabled": false,
                "condition": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                    "dataSource": {
                        "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                        "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                        "metricName": "CpuPercentage"
                    },
                    "operator": "GreaterThan",
                    "threshold": 90,
                    "windowSize": "PT15M"
                },
                "action": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                    "sendToServiceOwners": true,
                    "customEmails": [ ]
                }
            }
        },
        {
            "apiVersion": "2014-04-01",
            "name": "[concat('LongHttpQueue ', parameters('hostingPlanName'))]",
            "type": "Microsoft.Insights/alertrules",
            "location": "East US",
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]"
            ],
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]": "Resource",
                "displayName": "AutoScaleSettings"
            },
            "properties": {
                "name": "[concat('LongHttpQueue ', parameters('hostingPlanName'))]",
                "description": "[concat('The HTTP queue for the instances of ', parameters('hostingPlanName'), ' has a large number of pending requests.')]",
                "isEnabled": false,
                "condition": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
                    "dataSource": {
                        "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
                        "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                        "metricName": "HttpQueueLength"
                    },
                    "operator": "GreaterThan",
                    "threshold": 100.0,
                    "windowSize": "PT5M"
                },
                "action": {
                    "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
                    "sendToServiceOwners": true,
                    "customEmails": [ ]
                }
            }
        },
        {
            "apiVersion": "2014-04-01",
            "name": "[variables('webSiteName')]",
            "type": "Microsoft.Insights/components",
            "location": "Central US",
            "dependsOn": [
                "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
            ],
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
                "displayName": "AppInsightsComponent"
            },
            "properties": {
                "ApplicationId": "[variables('webSiteName')]"
            }
        },
        {
            "name": "[parameters('RedisCacheName')]",
            "type": "Microsoft.Cache/Redis",
            "location": "[resourceGroup().location]",
            "apiVersion": "2014-04-01-preview",
            "dependsOn": [ ],
            "tags": {
                "displayName": "RedisCache"
            },
            "properties": {
                "sku": {
                    "name": "[parameters('RedisCacheSKUName')]",
                    "family": "[parameters('RedisCacheSKUFamily')]",
                    "capacity": "[parameters('RedisCacheSKUCapacity')]"
                },
                "redisVersion": "[parameters('RedisCacheRedisVersion')]"
            }
        },
        {
            "name": "[variables('StorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "location": "[resourceGroup().location]",
            "apiVersion": "2015-06-15",
            "dependsOn": [ ],
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[parameters('StorageAccountType')]"
            }
        }
    ]
}